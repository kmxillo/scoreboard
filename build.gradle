subprojects { subproj ->

	repositories {
		mavenCentral()
	}

	ext.junitPlatformVersion = '1.1.1'
	ext.junitJupiterVersion = '5.1.1'

	apply plugin: 'java'

	compileTestJava {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
		options.compilerArgs += '-parameters'
	}

	test {
		useJUnitPlatform()

		// testLogging {
		//	events "PASSED", "FAILED", "SKIPPED"
		// }
	}

	dependencies {
		// JUnit Jupiter API and TestEngine implementation
		testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
		testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

		testCompile("org.mockito:mockito-core:2.18.0")
		testCompile("org.mockito:mockito-junit-jupiter:2.18.0")
	}

}

task wrapper(type: Wrapper) {
	description = 'Generates gradlew and gradlew.bat scripts'
	gradleVersion = '4.6'
}

task cleanZips(type: Delete) {
	delete "docs/windows.zip", "docs/unix.zip"
}

task zipUnix(type: Zip) {
	from fileTree(".").include("**/run-*.sh").files, fileTree(".").include("**/scoreboard-*.jar").files
	include "*"
	archiveName "unix.zip"
	destinationDir(file("./docs/"))
}

task zipWindows(type: Zip) {
	from fileTree(".").include("**/run-*.bat").files, fileTree(".").include("**/scoreboard-*.jar").files
	include "*"
	archiveName "windows.zip"
	destinationDir(file("./docs/"))
}


task buildZip() dependsOn(cleanZips, zipWindows, zipUnix) {
	println "Build zip files.."
}

